#–ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

import json
import os

SEARCH_WORD = range(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º config.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists('config.json'): –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    default_config = { 
        "bot_token": "",
        "other_settings": {
            "admin_id": –∞–π–¥–∏ –∞–¥–º–∏–Ω–∞,
            "debug_mode": False
        }
    }
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(default_config, f, indent=4, ensure_ascii=False)
    print("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
try:
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    TOKEN = config['bot_token']
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
    TOKEN = "7828105755:AAETPQBTZtVnVtes7kv0by1s9Fnl5WJwwiE"  # fallback —Ç–æ–∫–µ–Ω

#–¢–µ–º–∞—Ç–∏–∫–∏ —Å–ª–æ–≤ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –∏–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤

topics = {
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": [
        ("Student", "–°—Ç—É–¥–µ–Ω—Ç (–º.), –°—Ç—É–¥–µ–Ω—Ç–∫–∞ (–∂.)"),
        ("Teacher", "–£—á–∏—Ç–µ–ª—å (–º.), –£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ (–∂.)"),
        ("School", "–®–∫–æ–ª–∞"),
        ("University", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"),
        ("Exam", "–≠–∫–∑–∞–º–µ–Ω"),
        ("Homework", "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"),
        ("Book", "–ö–Ω–∏–≥–∞"),
        ("Lecture", "–õ–µ–∫—Ü–∏—è"),
        ("Grade", "–û—Ü–µ–Ω–∫–∞"),
        ("Diploma", "–î–∏–ø–ª–æ–º"),
        ("Degree", "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"),
        ("Bachelor's degree", "–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"),
        ("Master's degree", "–º–∞–≥–∏—Å—Ç—Ä")
    ],
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": [
        ("Doctor", "–î–æ–∫—Ç–æ—Ä, –≤—Ä–∞—á"),
        ("Hospital", "–ë–æ–ª—å–Ω–∏—Ü–∞"),
        ("Medicine", "–õ–µ–∫–∞—Ä—Å—Ç–≤–æ"),
        ("Nurse", "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞"),
        ("Patient", "–ü–∞—Ü–∏–µ–Ω—Ç"),
        ("Surgery", "–û–ø–µ—Ä–∞—Ü–∏—è"),
        ("Pain", "–ë–æ–ª—å"),
        ("Prescription", "–†–µ—Ü–µ–ø—Ç"),
        ("Vaccine", "–í–∞–∫—Ü–∏–Ω–∞"),
        ("Ambulance", "–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å")
    ],
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
        ("Computer", "–ö–æ–º–ø—å—é—Ç–µ—Ä"),
        ("Internet", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"),
        ("Software", "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (–ü–û)"),
        ("Smartphone", "–°–º–∞—Ä—Ç—Ñ–æ–Ω"),
        ("Robot", "–†–æ–±–æ—Ç"),
        ("Artificial Intelligence (AI)", "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò)"),
        ("Data", "–î–∞–Ω–Ω—ã–µ"),
        ("Algorithm", "–ê–ª–≥–æ—Ä–∏—Ç–º"),
        ("Cybersecurity", "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"),
        ("Virtual Reality (VR)", "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å (–í–†)")
    ],
    "–ü–æ–ª–∏—Ç–∏–∫–∞": [
        ("President", "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç"),
        ("Government", "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ"),
        ("Election", "–í—ã–±–æ—Ä—ã"),
        ("Law", "–ó–∞–∫–æ–Ω"),
        ("Democracy", "–î–µ–º–æ–∫—Ä–∞—Ç–∏—è"),
        ("Minister", "–ú–∏–Ω–∏—Å—Ç—Ä"),
        ("Party (political)", "–ü–∞—Ä—Ç–∏—è"),
        ("Corruption", "–ö–æ—Ä—Ä—É–ø—Ü–∏—è"),
        ("Diplomacy", "–î–∏–ø–ª–æ–º–∞—Ç–∏—è"),
        ("Revolution", "–†–µ–≤–æ–ª—é—Ü–∏—è")
    ],
    "–ò—Å—Ç–æ—Ä–∏—è": [
        ("War", "–í–æ–π–Ω–∞"),
        ("Empire", "–ò–º–ø–µ—Ä–∏—è"),
        ("Revolution", "–†–µ–≤–æ–ª—é—Ü–∏—è"),
        ("Ancient", "–î—Ä–µ–≤–Ω–∏–π"),
        ("Civilization", "–¶–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è"),
        ("Battle", "–ë–∏—Ç–≤–∞"),
        ("King", "–ö–æ—Ä–æ–ª—å"),
        ("Queen", "–ö–æ—Ä–æ–ª–µ–≤–∞"),
        ("Discovery", "–û—Ç–∫—Ä—ã—Ç–∏–µ"),
        ("Century", "–í–µ–∫")
    ]
}

#–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é

def get_main_keyboard():
    buttons = [
        [KeyboardButton("–í—ã–±–æ—Ä —Ç–µ–º—ã")],
        [KeyboardButton("–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞")],
        [KeyboardButton("–ü–æ–º–æ—â—å")],
        [KeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

#–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã 

def get_topics_keyboard():
    topics_buttons = [[KeyboardButton(topic)] for topic in topics]
    topics_buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(topics_buttons, resize_keyboard=True)

def get_study_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"), KeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

#–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ")
    return SEARCH_WORD

async def search_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    search_term = update.message.text.lower()
    found_words = []
    
    for topic, words in topics.items():
        for eng, rus in words:
            if search_term in eng.lower() or search_term in rus.lower():
                found_words.append(f"{topic}: {eng} - {rus}")
    
    if found_words:
        response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(found_words)
    else:
        response = "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    await update.message.reply_text(response, reply_markup=get_main_keyboard())
    return ConversationHandler.END

search_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞$"), start_search)],
    states={
        SEARCH_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_word)],
    },
    fallbacks=[]
)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Hello! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–µ. "
        "–°–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç)",
        reply_markup=get_main_keyboard()
    )

#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data
    
    if text == "–í—ã–±–æ—Ä —Ç–µ–º—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
            reply_markup=get_topics_keyboard()
        )
    elif text in topics:
        user_data["selected_topic"] = text
        user_data["current_index"] = 0
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: {text}. –ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ' –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=get_study_keyboard()
        )
    elif text == "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ":
        topic = user_data.get("selected_topic")
        index = user_data.get("current_index", 0)

        if topic:
            words = topics[topic]
            if index < len(words):
                eng, rus = words[index]
                await update.message.reply_text(f"{index + 1}. {eng} ‚Äì {rus}")
                user_data["current_index"] = index + 1
            else:
                await update.message.reply_text("üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π —Ç–µ–º–µ!")
        else:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ '–í—ã–±–æ—Ä —Ç–µ–º—ã'.")
    elif text == "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ":
        topic = user_data.get("selected_topic")
        index = user_data.get("current_index", 0)

        if topic and index > 1:
            index -= 2
            user_data["current_index"] = index
            words = topics[topic]
            eng, rus = words[index]
            await update.message.reply_text(f"{index + 1}. {eng} ‚Äì {rus}")
            user_data["current_index"] = index + 1
        elif topic and index == 1:
            user_data["current_index"] = 0
            eng, rus = topics[topic][0]
            await update.message.reply_text(f"1. {eng} ‚Äì {rus}")
            user_data["current_index"] = 1
        else:
            await update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞.")
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–º—É":
        topic = user_data.get("selected_topic")
        if topic:
            user_data["current_index"] = 0
            await update.message.reply_text(
                f"–¢–µ–º–∞ '{topic}' –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ'."
            )
        else:
            await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É.")
    elif text == "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif text == "–ü–æ–º–æ—â—å":
        await update.message.reply_text("–í–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É: @nessska_a")
    elif text == "–û –ø—Ä–æ–µ–∫—Ç–µ":
        await update.message.reply_text(
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã '–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–æ—Å—Ç—Ä–µ–¥–∞–∫—Ç–æ—Ä PRO':\n"
            "–°–∞–≤–∏–Ω—ã—Ö –ê–Ω–∞—Å—Ç–∞—Å–∏—è - —Ç–∏–º–ª–∏–¥\n"
            "–ß—É—Ö–≤–∞–Ω—Ü–µ–≤–∞ –î–∞—Ä—å—è\n"
            "–®–∞—Ä–∏—Ñ—É–ª–ª–∏–Ω –†—É—Å–ª–∞–Ω\n"
            "–ò–≥–æ–ª–∫–∏–Ω –í–ª–∞–¥–∏–º–∏—Ä\n"
            "–†–∞—Ö–º–æ–Ω–∫—É–ª–æ–≤ –ê–∑–∏–∑–±–µ–∫\n"
            "–Ø—Ä—É–ª–ª–∏–Ω –≠–ª—å–¥–∞—Ä"
        )
    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

#–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(search_conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
